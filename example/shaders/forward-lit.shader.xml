<?xml version="1.0" encoding="utf-8" ?>
<shader name="forward-lit" archetype="brk_shader_base" description="Forward lightning with single light source">
    <options>
        <option name="D_DEBUG_COLOR" description="Use extra color for debug"/>
        <option name="D_ANIMATE" description="Use engine global time to animate"/>
    </options>
    <params>
        <param name="ptDiffuse" uiName="Diffuse" type="texture2d" default="white"/>
        <param name="pMVP" uiName="MVP matrix" type="mat4"/>
        <param name="pModel" uiName="Model matrix" type="mat3"/>
        <param name="pLightPos" uiName="Light pos" type="float3" default="0 0 10"/>
        <param name="pLightColor" uiName="Light color" type="float3" default="1 1 1"/>
        <param name="pLightDir" uiName="Light direction" type="float3" default="0 0 -1"/>
        <param name="pLightAmbient" uiName="Light ambient" type="float3" default="0.1 0.1 0.1"/>
        <param name="pTime" uiName="Time" type="float1" description="Time used to animate texture" default="0.1"/>
    </params>
    <techniques>
        <technique name="default" language="GLSL410GL">
            <passes>
                <pass name="main">
                    <vertex>
                        void vertex(inout Params params) {
                            params.projPos = pMVP * vec4(getPos(), 1.0f);
                            params.worldPos = pModel * getPos();
                            params.worldNorm = pModel * getNorm();
                            params.color = getColor();
                            params.uv = getUV();
                        }
                    </vertex>
                    <fragment>
                        void fragment(inout Params params) {
                            vec3 pos = getWorldPos();
                            vec3 norm = getWorldNorm();
                            vec2 uv = getUV();
                        #ifdef D_ANIMATE
                            uv += vec2(0.1 * pTime, sin(0.2 * pTime));
                        #endif //D_ANIMATE
                            if (!gl_FrontFacing)
                                norm = -norm;
                            vec3 toL = normalize(pLightPos - pos);
                            float dotLN = max(0.0f, dot(toL, norm));
                            vec3 color = getColor();
                            vec3 diffuse = texture(ptDiffuse, uv).rgb;
                            vec3 result = color * diffuse * (pLightAmbient + pLightColor * dotLN);
                            params.outColor = vec4(result, 1.0f);
                        #ifdef D_DEBUG_COLOR
                            params.outColor = vec4(diffuse * vec3(1, 0.1f, 0.1f), 1);
                        #endif //D_DEBUG_COLOR
                        }
                    </fragment>
                </pass>
            </passes>
        </technique>
    </techniques>
</shader>